# config.yaml

worker:
  replicas: 4
  resources:
    requests:
      cpu: 0.5
      memory: 256M
    limits:
      cpu: 1
      memory: 1G
  env:
    - name: EXTRA_CONDA_PACKAGES
      value: zarr xarray netcdf4 -c conda-forge

jupyter:
  name: jupyter # Jupyter name.
  enabled: true # Enable/disable the bundled Jupyter notebook.
  rbac: true # Create RBAC service account and role to allow Jupyter pod to scale worker pods and access logs.
  image:
    repository: "ghcr.io/dask/dask-notebook" # Container image repository.
    tag: "2022.9.1" # Container image tag.
    pullPolicy: IfNotPresent # Container image pull policy.
    pullSecrets: # Container image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/).
    #  - name: regcred
    #
  replicas: 1 # Number of notebook servers.
  serviceType: "ClusterIP" # Scheduler service type. Set to `LoadBalancer` to expose outside of your cluster.
  # serviceType: "NodePort"
  # serviceType: "LoadBalancer"
  servicePort: 80 # Jupyter service internal port.
  # This hash corresponds to the password 'dask'
  password: "sha1:aae8550c0a44:9507d45e087d5ee481a5ce9f4f16f37a0867318c" # Password hash. Default hash corresponds to the password `dask`.
  env:
    - name: EXTRA_CONDA_PACKAGES
      value: zarr xarray netcdf4 matplotlib -c conda-forge
  command: null # Container command.
  args: # Container arguments.
  #  - "start.sh"
  #  - "jupyter"
  #  - "lab"
  extraConfig: |-
    # Extra Jupyter config goes here
    # E.g
    # c.NotebookApp.port = 8888
  resources: {} # Jupyter pod resources. See `values.yaml` for example values.
  #  limits:
  #    cpu: 2
  #    memory: 6G
  #  requests:
  #    cpu: 2
  #    memory: 6G
  mounts: {} # Worker Pod volumes and volume mounts, mounts.volumes follows kuberentes api v1 Volumes spec. mounts.volumeMounts follows kubernetesapi v1 VolumeMount spec
  #  volumes:
  #    - name: data
  #      emptyDir: {}
  #  volumeMounts:
  #    - name: data
  #      mountPath: /data
  tolerations: [] # Tolerations.
  affinity: {} # Container affinity.
  nodeSelector: {} # Node Selector.
  securityContext: {} # Security Context.
  serviceAccountName: "dask-jupyter" # Service account for use with RBAC
  ingress:
    enabled: false # Enable ingress.
    # ingressClassName: 
    tls: false # Ingress should use TLS.
    # secretName: dask-jupyter-tls
    pathType: Prefix # set pathType in ingress
    hostname: dask-jupyter.example.com # Ingress hostname.
    annotations:
      {} # Ingress annotations. See `values.yaml` for example values.
      # kuernetesbernetes.io/ingress.class: "nginx"
      # secretName: my-tls-cert
      # kub.io/tls-acme: "true"